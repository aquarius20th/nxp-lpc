/***********************************************Copyright (c)*********************************************
**                               
**                                     
**                                  
**
**--------------File Info---------------------------------------------------------------------------------
** File name:			    queue.h
** Last modified Date:      2007-09-20
** Last Version:		    1.0
** Descriptions:		    数据队列中间件
**
**--------------------------------------------------------------------------------------------------------
** Created by:			    chengmingji
** Created date:		    2007-07-08
** Version:				    1.0
** Descriptions:		    
**
**--------------------------------------------------------------------------------------------------------
** Modified by:			    lixiaocheng
** Modified Date:		    2007-09-08
** Version:				    1.0
** Descriptions:		    对代码格式重新排版
**
*********************************************************************************************************/
#ifndef __QUEUE_H
#define __QUEUE_H
#pragma once
/*********************************************************************************************************
  队列操作返回
*********************************************************************************************************/
#ifndef NOT_OK
#define NOT_OK              0                                         /* 参数错误                     */
#endif

#define QUEUE_OK            1                                           /* 操作成功                     */

#define QUEUE_FULL          8                                           /* 返回队列满状态               */
#define QUEUE_EMPTY         4                                           /* 返回队列空状态               */

/*********************************************************************************************************
  下面的宏定义是传递给用户处理队列满时，判断对立是FIFO,还是LIFO
*********************************************************************************************************/
#define Q_WRITE_MODE        1                                           /* 操作成功                     */
#define Q_WRITE_FRONT_MODE  2                                           /* 操作成功                     */

/*********************************************************************************************************
  定义数据队列的数据类型
*********************************************************************************************************/
#ifndef QUEUE_DATA_TYPE
#define QUEUE_DATA_TYPE     INT8U
#endif

/*********************************************************************************************************
  定义数据队列结构体
*********************************************************************************************************/
typedef struct DataQueue
{
    QUEUE_DATA_TYPE     *pOut;                                           /* 指向数据输出位置             */
    QUEUE_DATA_TYPE     *pIn;                                            /* 指向数据输入位置             */
    QUEUE_DATA_TYPE     *pEnd;                                           /* 指向Buf的结束位置            */
    INT16U              DataCnt;                                         /* 队列中数据个数               */
    INT16U              MaxDataNum;                                    /* 队列中允许存储的数据个数     */
    
    INT8U               (* ReadEmpty)();                                /* 读空处理函数                 */
    INT8U               (* WriteFull)();                                /* 写满处理函数                 */
    QUEUE_DATA_TYPE     Buf[1];                            /* 存储数据的空间               */
} DataQueue;

 
/*********************************************************************************************************
** Function name:           QueueCreate
** Descriptions:            初始化数据队列
** Input parameters:        Buf      ：为队列分配的存储空间地址
**                          SizeOfBuf：为队列分配的存储空间大小（字节）
**                          ReadEmpty：为队列读空时处理程序
**                          WriteFull：为队列写满时处理程序
** Output parameters:       NONE
** Returned value:          NOT_OK  :参数错误
**                          QUEUE_OK:成功
*********************************************************************************************************/
extern INT8U QueueCreate(DataQueue  *Buf,  INT32U SizeOfBuf, INT8U  (* ReadEmpty)(), INT8U (* WriteFull)() );               
/*********************************************************************************************************
** Function name:           QueueRead
** Descriptions:            获取队列中的数据
** Input parameters:        pRet:存储返回的消息的地址
**                          Buf:指向队列的指针
** Output parameters:       NONE
** Returned value:          NOT_OK     ：参数错误
**                          QUEUE_OK   ：收到消息
**                          QUEUE_EMPTY：队列空
*********************************************************************************************************/
extern INT8U QueueRead(QUEUE_DATA_TYPE *pRet, DataQueue *Buf);


/*********************************************************************************************************
** Function name:           QueueWrite
** Descriptions:            FIFO方式发送数据
** Input parameters:        Buf :指向队列的指针
**                          Data:发送的数据
** Output parameters:       NONE
** Returned value:          NOT_OK    : 参数错误
**                          QUEUE_FULL: 队列满
**                          QUEUE_OK  : 发送成功
*********************************************************************************************************/
extern INT8U QueueWrite(DataQueue *Buf, QUEUE_DATA_TYPE Data);
extern INT8U QueueWriteEx (DataQueue *Buf, QUEUE_DATA_TYPE *pData,INT16U nLen,INT16U *pnRetLen);
/*********************************************************************************************************
** Function name:           QueueWriteFront
** Descriptions:            LIFO方式发送数据
** Input parameters:        Buf :指向队列的指针
**                          Data:发送的数据
** Output parameters:       NONE
** Returned value:          NOT_OK    : 参数错误
**                          QUEUE_FULL: 队列满
**                          QUEUE_OK  : 发送成功
*********************************************************************************************************/
extern INT8U QueueWriteFront(DataQueue *Buf, QUEUE_DATA_TYPE Data);

/*********************************************************************************************************
** Function name:           GetQueueDataCnt
** Descriptions:            取得队列中数据数
** Input parameters:        Buf :指向队列的指针
** Output parameters:       NONE
** Returned value:          队列包含数据数
*********************************************************************************************************/
extern INT16U GetQueueDataCnt(DataQueue *Buf);


/*********************************************************************************************************
** Function name:           GetQueueSize
** Descriptions:            取得队列总容量
** Input parameters:        Buf :指向队列的指针
** Output parameters:       NONE
** Returned value:          队列总容量
*********************************************************************************************************/
extern INT16U GetQueueSize(DataQueue *Buf);

/*********************************************************************************************************
** Function name:           OSQFlush
** Descriptions:            清空队列
** Input parameters:        Buf :指向队列的指针
** Output parameters:       NONE
** Returned value:          NONE
*********************************************************************************************************/
extern void QueueFlush(DataQueue *Buf);
#endif                                                                  /* __QUEUE_H                    */
/*********************************************************************************************************
   END FILE
*********************************************************************************************************/
